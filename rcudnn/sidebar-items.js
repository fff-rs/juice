window.SIDEBAR_ITEMS = {"constant":[["CUDNN_ADV_INFER_MAJOR",""],["CUDNN_ADV_INFER_MINOR",""],["CUDNN_ADV_INFER_PATCH",""],["CUDNN_ADV_TRAIN_MAJOR",""],["CUDNN_ADV_TRAIN_MINOR",""],["CUDNN_ADV_TRAIN_PATCH",""],["CUDNN_ATTN_DISABLE_PROJ_BIASES",""],["CUDNN_ATTN_ENABLE_PROJ_BIASES",""],["CUDNN_ATTN_QUERYMAP_ALL_TO_ONE",""],["CUDNN_ATTN_QUERYMAP_ONE_TO_ONE",""],["CUDNN_ATTN_WKIND_COUNT",""],["CUDNN_BN_MIN_EPSILON",""],["CUDNN_CNN_INFER_MAJOR",""],["CUDNN_CNN_INFER_MINOR",""],["CUDNN_CNN_INFER_PATCH",""],["CUDNN_CNN_TRAIN_MAJOR",""],["CUDNN_CNN_TRAIN_MINOR",""],["CUDNN_CNN_TRAIN_PATCH",""],["CUDNN_DIM_MAX",""],["CUDNN_LRN_MAX_N",""],["CUDNN_LRN_MIN_BETA",""],["CUDNN_LRN_MIN_K",""],["CUDNN_LRN_MIN_N",""],["CUDNN_MAJOR",""],["CUDNN_MINOR",""],["CUDNN_OPS_INFER_MAJOR",""],["CUDNN_OPS_INFER_MINOR",""],["CUDNN_OPS_INFER_PATCH",""],["CUDNN_OPS_TRAIN_MAJOR",""],["CUDNN_OPS_TRAIN_MINOR",""],["CUDNN_OPS_TRAIN_PATCH",""],["CUDNN_PATCHLEVEL",""],["CUDNN_RNN_PADDED_IO_DISABLED",""],["CUDNN_RNN_PADDED_IO_ENABLED",""],["CUDNN_SEQDATA_DIM_COUNT",""],["CUDNN_VERSION",""],["libraryPropertyType_t_MAJOR_VERSION",""],["libraryPropertyType_t_MINOR_VERSION",""],["libraryPropertyType_t_PATCH_LEVEL",""]],"enum":[["Error","Defines CUDA’s cuDNN errors."],["cudaAccessProperty","Specifies performance hint with ::cudaAccessPolicyWindow for hitProp and missProp members."],["cudaCGScope","CUDA cooperative group scope"],["cudaChannelFormatKind","Channel format kind"],["cudaComputeMode","CUDA device compute modes"],["cudaDataType",""],["cudaDataType_t",""],["cudaDeviceAttr","CUDA device attributes"],["cudaDeviceP2PAttr","CUDA device P2P attributes"],["cudaError","CUDA error types"],["cudaError_t","CUDA error types"],["cudaExternalMemoryHandleType","External memory handle types"],["cudaExternalSemaphoreHandleType","External semaphore handle types"],["cudaFlushGPUDirectRDMAWritesOptions","CUDA GPUDirect RDMA flush writes APIs supported on the device"],["cudaFlushGPUDirectRDMAWritesScope","CUDA GPUDirect RDMA flush writes scopes"],["cudaFlushGPUDirectRDMAWritesTarget","CUDA GPUDirect RDMA flush writes targets"],["cudaFuncAttribute","CUDA function attributes that can be set using ::cudaFuncSetAttribute"],["cudaFuncCache","CUDA function cache configurations"],["cudaGPUDirectRDMAWritesOrdering","CUDA GPUDirect RDMA flush writes ordering features of the device"],["cudaGetDriverEntryPointFlags","Flags to specify search options to be used with ::cudaGetDriverEntryPoint For more details see ::cuGetProcAddress"],["cudaGraphDebugDotFlags","CUDA Graph debug write options"],["cudaGraphExecUpdateResult","CUDA Graph Update error types"],["cudaGraphInstantiateFlags","Flags for instantiating a graph"],["cudaGraphMemAttributeType","Graph memory attributes"],["cudaGraphNodeType","CUDA Graph node types"],["cudaGraphicsCubeFace","CUDA graphics interop array indices for cube maps"],["cudaGraphicsMapFlags","CUDA graphics interop map flags"],["cudaGraphicsRegisterFlags","CUDA graphics interop register flags"],["cudaKernelNodeAttrID","Graph kernel node Attributes"],["cudaLimit","CUDA Limits"],["cudaMemAccessFlags","Specifies the memory protection flags for mapping."],["cudaMemAllocationHandleType","Flags for specifying particular handle types"],["cudaMemAllocationType","Defines the allocation types available"],["cudaMemLocationType","Specifies the type of location"],["cudaMemPoolAttr","CUDA memory pool attributes"],["cudaMemRangeAttribute","CUDA range attributes"],["cudaMemcpyKind","CUDA memory copy types"],["cudaMemoryAdvise","CUDA Memory Advise values"],["cudaMemoryType","CUDA memory types"],["cudaOutputMode","CUDA Profiler Output modes"],["cudaOutputMode_t","CUDA Profiler Output modes"],["cudaResourceType","CUDA resource types"],["cudaResourceViewFormat","CUDA texture resource view formats"],["cudaRoundMode",""],["cudaSharedCarveout","Shared memory carveout configurations. These may be passed to cudaFuncSetAttribute"],["cudaSharedMemConfig","CUDA shared memory configuration"],["cudaStreamAttrID","Stream Attributes"],["cudaStreamCaptureMode","Possible modes for stream capture thread interactions. For more details see ::cudaStreamBeginCapture and ::cudaThreadExchangeStreamCaptureMode"],["cudaStreamCaptureStatus","Possible stream capture statuses returned by ::cudaStreamIsCapturing"],["cudaStreamUpdateCaptureDependenciesFlags","Flags for ::cudaStreamUpdateCaptureDependencies"],["cudaSurfaceBoundaryMode","CUDA Surface boundary modes"],["cudaSurfaceFormatMode","CUDA Surface format modes"],["cudaSynchronizationPolicy",""],["cudaTextureAddressMode","CUDA texture address modes"],["cudaTextureFilterMode","CUDA texture filter modes"],["cudaTextureReadMode","CUDA texture read modes"],["cudaUserObjectFlags","Flags for user objects for graphs"],["cudaUserObjectRetainFlags","Flags for retaining user object references for graphs"],["cudnnActivationMode_t",""],["cudnnBackendAttributeName_t",""],["cudnnBackendAttributeType_t",""],["cudnnBackendBehaviorNote_t",""],["cudnnBackendDescriptorType_t",""],["cudnnBackendHeurMode_t",""],["cudnnBackendKnobType_t",""],["cudnnBackendLayoutType_t",""],["cudnnBackendNumericalNote_t",""],["cudnnBatchNormMode_t",""],["cudnnBatchNormOps_t",""],["cudnnBnFinalizeStatsMode_t",""],["cudnnCTCLossAlgo_t",""],["cudnnConvolutionBwdDataAlgo_t",""],["cudnnConvolutionBwdFilterAlgo_t",""],["cudnnConvolutionFwdAlgo_t",""],["cudnnConvolutionMode_t",""],["cudnnDataType_t",""],["cudnnDeterminism_t",""],["cudnnDirectionMode_t",""],["cudnnDivNormMode_t",""],["cudnnErrQueryMode_t",""],["cudnnFoldingDirection_t",""],["cudnnForwardMode_t",""],["cudnnFusedOpsConstParamLabel_t",""],["cudnnFusedOpsPointerPlaceHolder_t",""],["cudnnFusedOpsVariantParamLabel_t",""],["cudnnFusedOps_t",""],["cudnnGenStatsMode_t",""],["cudnnIndicesType_t",""],["cudnnLRNMode_t",""],["cudnnLossNormalizationMode_t",""],["cudnnMathType_t",""],["cudnnMultiHeadAttnWeightKind_t",""],["cudnnNanPropagation_t",""],["cudnnNormAlgo_t",""],["cudnnNormMode_t",""],["cudnnNormOps_t",""],["cudnnOpTensorOp_t",""],["cudnnPointwiseMode_t",""],["cudnnPoolingMode_t",""],["cudnnRNNAlgo_t",""],["cudnnRNNBiasMode_t",""],["cudnnRNNClipMode_t",""],["cudnnRNNDataLayout_t",""],["cudnnRNNInputMode_t",""],["cudnnRNNMode_t",""],["cudnnReduceTensorIndices_t",""],["cudnnReduceTensorOp_t",""],["cudnnReorderType_t",""],["cudnnSamplerType_t",""],["cudnnSeqDataAxis_t",""],["cudnnSeverity_t",""],["cudnnSoftmaxAlgorithm_t",""],["cudnnSoftmaxMode_t",""],["cudnnStatus_t",""],["cudnnTensorFormat_t",""],["cudnnWgradMode_t",""]],"fn":[["cudaArrayGetInfo","\\brief Gets info about the specified cudaArray"],["cudaArrayGetPlane","\\brief Gets a CUDA array plane from a CUDA array"],["cudaArrayGetSparseProperties",""],["cudaBindSurfaceToArray","\\brief Binds an array to a surface"],["cudaBindTexture","\\brief Binds a memory area to a texture"],["cudaBindTexture2D","\\brief Binds a 2D memory area to a texture"],["cudaBindTextureToArray","\\brief Binds an array to a texture"],["cudaBindTextureToMipmappedArray","\\brief Binds a mipmapped array to a texture"],["cudaChooseDevice","\\brief Select compute-device which best matches criteria"],["cudaCreateChannelDesc","\\brief Returns a channel descriptor using the specified format"],["cudaCreateSurfaceObject","\\brief Creates a surface object"],["cudaCreateTextureObject","\\brief Creates a texture object"],["cudaCtxResetPersistingL2Cache","\\brief Resets all persisting lines in cache to normal status."],["cudaDestroyExternalMemory","\\brief Destroys an external memory object."],["cudaDestroyExternalSemaphore","\\brief Destroys an external semaphore"],["cudaDestroySurfaceObject","\\brief Destroys a surface object"],["cudaDestroyTextureObject","\\brief Destroys a texture object"],["cudaDeviceCanAccessPeer","\\brief Queries if a device may directly access a peer device’s memory."],["cudaDeviceDisablePeerAccess","\\brief Disables direct access to memory allocations on a peer device."],["cudaDeviceEnablePeerAccess","\\brief Enables direct access to memory allocations on a peer device."],["cudaDeviceFlushGPUDirectRDMAWrites",""],["cudaDeviceGetAttribute","\\brief Returns information about the device"],["cudaDeviceGetByPCIBusId","\\brief Returns a handle to a compute device"],["cudaDeviceGetCacheConfig","\\brief Returns the preferred cache configuration for the current device."],["cudaDeviceGetDefaultMemPool","\\brief Returns the default mempool of a device"],["cudaDeviceGetGraphMemAttribute",""],["cudaDeviceGetLimit","\\brief Returns resource limits"],["cudaDeviceGetMemPool","\\brief Gets the current mempool for a device"],["cudaDeviceGetNvSciSyncAttributes","\\brief Return NvSciSync attributes that this device can support."],["cudaDeviceGetP2PAttribute","\\brief Queries attributes of the link between two devices."],["cudaDeviceGetPCIBusId","\\brief Returns a PCI Bus Id string for the device"],["cudaDeviceGetSharedMemConfig","\\brief Returns the shared memory configuration for the current device."],["cudaDeviceGetStreamPriorityRange","\\brief Returns numerical values that correspond to the least and greatest stream priorities."],["cudaDeviceGetTexture1DLinearMaxWidth",""],["cudaDeviceGraphMemTrim",""],["cudaDeviceReset","\\brief Destroy all allocations and reset all state on the current device in the current process."],["cudaDeviceSetCacheConfig","\\brief Sets the preferred cache configuration for the current device."],["cudaDeviceSetGraphMemAttribute",""],["cudaDeviceSetLimit","\\brief Set resource limits"],["cudaDeviceSetMemPool","\\brief Sets the current memory pool of a device"],["cudaDeviceSetSharedMemConfig","\\brief Sets the shared memory configuration for the current device."],["cudaDeviceSynchronize","\\brief Wait for compute device to finish"],["cudaDriverGetVersion","\\brief Returns the latest version of CUDA supported by the driver"],["cudaEventCreate","\\brief Creates an event object"],["cudaEventCreateWithFlags","\\brief Creates an event object with the specified flags"],["cudaEventDestroy","\\brief Destroys an event object"],["cudaEventElapsedTime","\\brief Computes the elapsed time between events"],["cudaEventQuery","\\brief Queries an event’s status"],["cudaEventRecord","\\brief Records an event"],["cudaEventRecordWithFlags",""],["cudaEventSynchronize","\\brief Waits for an event to complete"],["cudaExternalMemoryGetMappedBuffer","\\brief Maps a buffer onto an imported memory object"],["cudaExternalMemoryGetMappedMipmappedArray","\\brief Maps a CUDA mipmapped array onto an external memory object"],["cudaFree","\\brief Frees memory on the device"],["cudaFreeArray","\\brief Frees an array on the device"],["cudaFreeAsync","\\brief Frees memory with stream ordered semantics"],["cudaFreeHost","\\brief Frees page-locked memory"],["cudaFreeMipmappedArray","\\brief Frees a mipmapped array on the device"],["cudaFuncGetAttributes","\\brief Find out attributes for a given function"],["cudaFuncSetAttribute","\\brief Set attributes for a given function"],["cudaFuncSetCacheConfig","\\brief Sets the preferred cache configuration for a device function"],["cudaFuncSetSharedMemConfig","\\brief Sets the shared memory configuration for a device function"],["cudaGetChannelDesc","\\brief Get the channel descriptor of an array"],["cudaGetDevice","\\brief Returns which device is currently being used"],["cudaGetDeviceCount","\\brief Returns the number of compute-capable devices"],["cudaGetDeviceFlags","\\brief Gets the flags for the current device"],["cudaGetDeviceProperties","\\brief Returns information about the compute-device"],["cudaGetDriverEntryPoint","\\brief Returns the requested driver API function pointer"],["cudaGetErrorName","\\brief Returns the string representation of an error code enum name"],["cudaGetErrorString","\\brief Returns the description string for an error code"],["cudaGetExportTable","\\cond impl_private"],["cudaGetFuncBySymbol","\\brief Get pointer to device entry function that matches entry function \\p symbolPtr"],["cudaGetLastError","\\brief Returns the last error from a runtime call"],["cudaGetMipmappedArrayLevel","\\brief Gets a mipmap level of a CUDA mipmapped array"],["cudaGetSurfaceObjectResourceDesc","\\brief Returns a surface object’s resource descriptor Returns the resource descriptor for the surface object specified by \\p surfObject."],["cudaGetSurfaceReference","\\brief Get the surface reference associated with a symbol"],["cudaGetSymbolAddress","\\brief Finds the address associated with a CUDA symbol"],["cudaGetSymbolSize","\\brief Finds the size of the object associated with a CUDA symbol"],["cudaGetTextureAlignmentOffset","\\brief Get the alignment offset of a texture"],["cudaGetTextureObjectResourceDesc","\\brief Returns a texture object’s resource descriptor"],["cudaGetTextureObjectResourceViewDesc","\\brief Returns a texture object’s resource view descriptor"],["cudaGetTextureObjectTextureDesc","\\brief Returns a texture object’s texture descriptor"],["cudaGetTextureReference","\\brief Get the texture reference associated with a symbol"],["cudaGraphAddChildGraphNode","\\brief Creates a child graph node and adds it to a graph"],["cudaGraphAddDependencies","\\brief Adds dependency edges to a graph."],["cudaGraphAddEmptyNode","\\brief Creates an empty node and adds it to a graph"],["cudaGraphAddEventRecordNode",""],["cudaGraphAddEventWaitNode",""],["cudaGraphAddExternalSemaphoresSignalNode",""],["cudaGraphAddExternalSemaphoresWaitNode",""],["cudaGraphAddHostNode","\\brief Creates a host execution node and adds it to a graph"],["cudaGraphAddKernelNode","\\brief Creates a kernel execution node and adds it to a graph"],["cudaGraphAddMemAllocNode",""],["cudaGraphAddMemFreeNode",""],["cudaGraphAddMemcpyNode","\\brief Creates a memcpy node and adds it to a graph"],["cudaGraphAddMemcpyNode1D",""],["cudaGraphAddMemcpyNodeFromSymbol",""],["cudaGraphAddMemcpyNodeToSymbol",""],["cudaGraphAddMemsetNode","\\brief Creates a memset node and adds it to a graph"],["cudaGraphChildGraphNodeGetGraph","\\brief Gets a handle to the embedded graph of a child graph node"],["cudaGraphClone","\\brief Clones a graph"],["cudaGraphCreate","\\brief Creates a graph"],["cudaGraphDebugDotPrint","\\brief Write a DOT file describing graph structure"],["cudaGraphDestroy","\\brief Destroys a graph"],["cudaGraphDestroyNode","\\brief Remove a node from the graph"],["cudaGraphEventRecordNodeGetEvent",""],["cudaGraphEventRecordNodeSetEvent",""],["cudaGraphEventWaitNodeGetEvent",""],["cudaGraphEventWaitNodeSetEvent",""],["cudaGraphExecChildGraphNodeSetParams",""],["cudaGraphExecDestroy","\\brief Destroys an executable graph"],["cudaGraphExecEventRecordNodeSetEvent",""],["cudaGraphExecEventWaitNodeSetEvent",""],["cudaGraphExecExternalSemaphoresSignalNodeSetParams",""],["cudaGraphExecExternalSemaphoresWaitNodeSetParams",""],["cudaGraphExecHostNodeSetParams","\\brief Sets the parameters for a host node in the given graphExec."],["cudaGraphExecKernelNodeSetParams","\\brief Sets the parameters for a kernel node in the given graphExec"],["cudaGraphExecMemcpyNodeSetParams","\\brief Sets the parameters for a memcpy node in the given graphExec."],["cudaGraphExecMemcpyNodeSetParams1D",""],["cudaGraphExecMemcpyNodeSetParamsFromSymbol",""],["cudaGraphExecMemcpyNodeSetParamsToSymbol",""],["cudaGraphExecMemsetNodeSetParams","\\brief Sets the parameters for a memset node in the given graphExec."],["cudaGraphExecUpdate","\\brief Check whether an executable graph can be updated with a graph and perform the update if possible"],["cudaGraphExternalSemaphoresSignalNodeGetParams",""],["cudaGraphExternalSemaphoresSignalNodeSetParams",""],["cudaGraphExternalSemaphoresWaitNodeGetParams",""],["cudaGraphExternalSemaphoresWaitNodeSetParams",""],["cudaGraphGetEdges","\\brief Returns a graph’s dependency edges"],["cudaGraphGetNodes","\\brief Returns a graph’s nodes"],["cudaGraphGetRootNodes","\\brief Returns a graph’s root nodes"],["cudaGraphHostNodeGetParams","\\brief Returns a host node’s parameters"],["cudaGraphHostNodeSetParams","\\brief Sets a host node’s parameters"],["cudaGraphInstantiate","\\brief Creates an executable graph from a graph"],["cudaGraphInstantiateWithFlags",""],["cudaGraphKernelNodeCopyAttributes","\\brief Copies attributes from source node to destination node."],["cudaGraphKernelNodeGetAttribute","\\brief Queries node attribute."],["cudaGraphKernelNodeGetParams","\\brief Returns a kernel node’s parameters"],["cudaGraphKernelNodeSetAttribute","\\brief Sets node attribute."],["cudaGraphKernelNodeSetParams","\\brief Sets a kernel node’s parameters"],["cudaGraphLaunch","\\brief Launches an executable graph in a stream"],["cudaGraphMemAllocNodeGetParams",""],["cudaGraphMemFreeNodeGetParams",""],["cudaGraphMemcpyNodeGetParams","\\brief Returns a memcpy node’s parameters"],["cudaGraphMemcpyNodeSetParams","\\brief Sets a memcpy node’s parameters"],["cudaGraphMemcpyNodeSetParams1D",""],["cudaGraphMemcpyNodeSetParamsFromSymbol",""],["cudaGraphMemcpyNodeSetParamsToSymbol",""],["cudaGraphMemsetNodeGetParams","\\brief Returns a memset node’s parameters"],["cudaGraphMemsetNodeSetParams","\\brief Sets a memset node’s parameters"],["cudaGraphNodeFindInClone","\\brief Finds a cloned version of a node"],["cudaGraphNodeGetDependencies","\\brief Returns a node’s dependencies"],["cudaGraphNodeGetDependentNodes","\\brief Returns a node’s dependent nodes"],["cudaGraphNodeGetType","\\brief Returns a node’s type"],["cudaGraphReleaseUserObject","\\brief Release a user object reference from a graph"],["cudaGraphRemoveDependencies","\\brief Removes dependency edges from a graph."],["cudaGraphRetainUserObject","\\brief Retain a reference to a user object from a graph"],["cudaGraphUpload",""],["cudaGraphicsMapResources","\\brief Map graphics resources for access by CUDA"],["cudaGraphicsResourceGetMappedMipmappedArray","\\brief Get a mipmapped array through which to access a mapped graphics resource."],["cudaGraphicsResourceGetMappedPointer","\\brief Get an device pointer through which to access a mapped graphics resource."],["cudaGraphicsResourceSetMapFlags","\\brief Set usage flags for mapping a graphics resource"],["cudaGraphicsSubResourceGetMappedArray","\\brief Get an array through which to access a subresource of a mapped graphics resource."],["cudaGraphicsUnmapResources","\\brief Unmap graphics resources."],["cudaGraphicsUnregisterResource","\\brief Unregisters a graphics resource for access by CUDA"],["cudaHostAlloc","\\brief Allocates page-locked memory on the host"],["cudaHostGetDevicePointer","\\brief Passes back device pointer of mapped host memory allocated by cudaHostAlloc or registered by cudaHostRegister"],["cudaHostGetFlags","\\brief Passes back flags used to allocate pinned host memory allocated by cudaHostAlloc"],["cudaHostRegister","\\brief Registers an existing host memory range for use by CUDA"],["cudaHostUnregister","\\brief Unregisters a memory range that was registered with cudaHostRegister"],["cudaImportExternalMemory","\\brief Imports an external memory object"],["cudaImportExternalSemaphore","\\brief Imports an external semaphore"],["cudaIpcCloseMemHandle","\\brief Attempts to close memory mapped with cudaIpcOpenMemHandle"],["cudaIpcGetEventHandle","\\brief Gets an interprocess handle for a previously allocated event"],["cudaIpcGetMemHandle","\\brief Gets an interprocess memory handle for an existing device memory allocation"],["cudaIpcOpenEventHandle","\\brief Opens an interprocess event handle for use in the current process"],["cudaIpcOpenMemHandle","\\brief Opens an interprocess memory handle exported from another process and returns a device pointer usable in the local process."],["cudaLaunchCooperativeKernel","\\brief Launches a device function where thread blocks can cooperate and synchronize as they execute"],["cudaLaunchCooperativeKernelMultiDevice","\\brief Launches device functions on multiple devices where thread blocks can cooperate and synchronize as they execute"],["cudaLaunchHostFunc","\\brief Enqueues a host function call in a stream"],["cudaLaunchKernel","\\brief Launches a device function"],["cudaMalloc","\\brief Allocate memory on the device"],["cudaMalloc3D","\\brief Allocates logical 1D, 2D, or 3D memory objects on the device"],["cudaMalloc3DArray","\\brief Allocate an array on the device"],["cudaMallocArray","\\brief Allocate an array on the device"],["cudaMallocAsync","\\brief Allocates memory with stream ordered semantics"],["cudaMallocFromPoolAsync","\\brief Allocates memory from a specified pool with stream ordered semantics."],["cudaMallocHost","\\brief Allocates page-locked memory on the host"],["cudaMallocManaged",""],["cudaMallocMipmappedArray","\\brief Allocate a mipmapped array on the device"],["cudaMallocPitch","\\brief Allocates pitched memory on the device"],["cudaMemAdvise","\\brief Advise about the usage of a given memory range"],["cudaMemGetInfo","\\brief Gets free and total device memory"],["cudaMemPoolCreate","\\brief Creates a memory pool"],["cudaMemPoolDestroy","\\brief Destroys the specified memory pool"],["cudaMemPoolExportPointer","\\brief Export data to share a memory pool allocation between processes."],["cudaMemPoolExportToShareableHandle","\\brief Exports a memory pool to the requested handle type."],["cudaMemPoolGetAccess","\\brief Returns the accessibility of a pool from a device"],["cudaMemPoolGetAttribute","\\brief Gets attributes of a memory pool"],["cudaMemPoolImportFromShareableHandle","\\brief imports a memory pool from a shared handle."],["cudaMemPoolImportPointer","\\brief Import a memory pool allocation from another process."],["cudaMemPoolSetAccess","\\brief Controls visibility of pools between devices"],["cudaMemPoolSetAttribute","\\brief Sets attributes of a memory pool"],["cudaMemPoolTrimTo","\\brief Tries to release memory back to the OS"],["cudaMemPrefetchAsync","\\brief Prefetches memory to the specified destination device"],["cudaMemRangeGetAttribute","\\brief Query an attribute of a given memory range"],["cudaMemRangeGetAttributes","\\brief Query attributes of a given memory range."],["cudaMemcpy","\\brief Copies data between host and device"],["cudaMemcpy2D","\\brief Copies data between host and device"],["cudaMemcpy2DArrayToArray","\\brief Copies data between host and device"],["cudaMemcpy2DAsync","\\brief Copies data between host and device"],["cudaMemcpy2DFromArray","\\brief Copies data between host and device"],["cudaMemcpy2DFromArrayAsync","\\brief Copies data between host and device"],["cudaMemcpy2DToArray","\\brief Copies data between host and device"],["cudaMemcpy2DToArrayAsync","\\brief Copies data between host and device"],["cudaMemcpy3D","\\brief Copies data between 3D objects"],["cudaMemcpy3DAsync","\\brief Copies data between 3D objects"],["cudaMemcpy3DPeer","\\brief Copies memory between devices"],["cudaMemcpy3DPeerAsync","\\brief Copies memory between devices asynchronously."],["cudaMemcpyArrayToArray","\\brief Copies data between host and device"],["cudaMemcpyAsync","\\brief Copies data between host and device"],["cudaMemcpyFromArray","\\brief Copies data between host and device"],["cudaMemcpyFromArrayAsync","\\brief Copies data between host and device"],["cudaMemcpyFromSymbol","\\brief Copies data from the given symbol on the device"],["cudaMemcpyFromSymbolAsync","\\brief Copies data from the given symbol on the device"],["cudaMemcpyPeer","\\brief Copies memory between two devices"],["cudaMemcpyPeerAsync","\\brief Copies memory between two devices asynchronously."],["cudaMemcpyToArray","\\brief Copies data between host and device"],["cudaMemcpyToArrayAsync","\\brief Copies data between host and device"],["cudaMemcpyToSymbol","\\brief Copies data to the given symbol on the device"],["cudaMemcpyToSymbolAsync","\\brief Copies data to the given symbol on the device"],["cudaMemset","\\brief Initializes or sets device memory to a value"],["cudaMemset2D","\\brief Initializes or sets device memory to a value"],["cudaMemset2DAsync","\\brief Initializes or sets device memory to a value"],["cudaMemset3D","\\brief Initializes or sets device memory to a value"],["cudaMemset3DAsync","\\brief Initializes or sets device memory to a value"],["cudaMemsetAsync","\\brief Initializes or sets device memory to a value"],["cudaMipmappedArrayGetSparseProperties",""],["cudaOccupancyAvailableDynamicSMemPerBlock","\\brief Returns dynamic shared memory available per block when launching \\p numBlocks blocks on SM."],["cudaOccupancyMaxActiveBlocksPerMultiprocessor","\\brief Returns occupancy for a device function"],["cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags","\\brief Returns occupancy for a device function with the specified flags"],["cudaPeekAtLastError","\\brief Returns the last error from a runtime call"],["cudaPointerGetAttributes","\\brief Returns attributes about a specified pointer"],["cudaRuntimeGetVersion","\\brief Returns the CUDA Runtime version"],["cudaSetDevice","\\brief Set device to be used for GPU executions"],["cudaSetDeviceFlags","\\brief Sets flags to be used for device executions"],["cudaSetDoubleForDevice","\\brief Converts a double argument to be executed on a device"],["cudaSetDoubleForHost","\\brief Converts a double argument after execution on a device"],["cudaSetValidDevices","\\brief Set a list of devices that can be used for CUDA"],["cudaSignalExternalSemaphoresAsync_v2",""],["cudaStreamAddCallback","\\brief Add a callback to a compute stream"],["cudaStreamAttachMemAsync",""],["cudaStreamBeginCapture","\\brief Begins graph capture on a stream"],["cudaStreamCopyAttributes","\\brief Copies attributes from source stream to destination stream."],["cudaStreamCreate","\\brief Create an asynchronous stream"],["cudaStreamCreateWithFlags","\\brief Create an asynchronous stream"],["cudaStreamCreateWithPriority","\\brief Create an asynchronous stream with the specified priority"],["cudaStreamDestroy","\\brief Destroys and cleans up an asynchronous stream"],["cudaStreamEndCapture","\\brief Ends capture on a stream, returning the captured graph"],["cudaStreamGetAttribute","\\brief Queries stream attribute."],["cudaStreamGetCaptureInfo","\\brief Query capture status of a stream"],["cudaStreamGetCaptureInfo_v2","\\brief Query a stream’s capture state (11.3+)"],["cudaStreamGetFlags","\\brief Query the flags of a stream"],["cudaStreamGetPriority","\\brief Query the priority of a stream"],["cudaStreamIsCapturing","\\brief Returns a stream’s capture status"],["cudaStreamQuery","\\brief Queries an asynchronous stream for completion status"],["cudaStreamSetAttribute","\\brief Sets stream attribute."],["cudaStreamSynchronize","\\brief Waits for stream tasks to complete"],["cudaStreamUpdateCaptureDependencies","\\brief Update the set of dependencies in a capturing stream (11.3+)"],["cudaStreamWaitEvent","\\brief Make a compute stream wait on an event"],["cudaThreadExchangeStreamCaptureMode","\\brief Swaps the stream capture interaction mode for a thread"],["cudaThreadExit","\\brief Exit and clean up from CUDA launches"],["cudaThreadGetCacheConfig","\\brief Returns the preferred cache configuration for the current device."],["cudaThreadGetLimit","\\brief Returns resource limits"],["cudaThreadSetCacheConfig","\\brief Sets the preferred cache configuration for the current device."],["cudaThreadSetLimit","\\brief Set resource limits"],["cudaThreadSynchronize","\\brief Wait for compute device to finish"],["cudaUnbindTexture","\\brief Unbinds a texture"],["cudaUserObjectCreate","\\brief Create a user object"],["cudaUserObjectRelease","\\brief Release a reference to a user object"],["cudaUserObjectRetain","\\brief Retain a reference to a user object"],["cudaWaitExternalSemaphoresAsync_v2",""],["cudnnActivationBackward",""],["cudnnActivationForward",""],["cudnnAddTensor",""],["cudnnAdvInferVersionCheck",""],["cudnnAdvTrainVersionCheck",""],["cudnnBackendCreateDescriptor",""],["cudnnBackendDestroyDescriptor",""],["cudnnBackendExecute",""],["cudnnBackendFinalize",""],["cudnnBackendGetAttribute",""],["cudnnBackendInitialize",""],["cudnnBackendSetAttribute",""],["cudnnBatchNormalizationBackward",""],["cudnnBatchNormalizationBackwardEx",""],["cudnnBatchNormalizationForwardInference",""],["cudnnBatchNormalizationForwardTraining",""],["cudnnBatchNormalizationForwardTrainingEx",""],["cudnnBuildRNNDynamic",""],["cudnnCTCLoss",""],["cudnnCTCLoss_v8",""],["cudnnCnnInferVersionCheck",""],["cudnnCnnTrainVersionCheck",""],["cudnnConvolutionBackwardBias",""],["cudnnConvolutionBackwardData",""],["cudnnConvolutionBackwardFilter",""],["cudnnConvolutionBiasActivationForward",""],["cudnnConvolutionForward",""],["cudnnCopyAlgorithmDescriptor",""],["cudnnCreate",""],["cudnnCreateActivationDescriptor",""],["cudnnCreateAlgorithmDescriptor",""],["cudnnCreateAlgorithmPerformance",""],["cudnnCreateAttnDescriptor",""],["cudnnCreateCTCLossDescriptor",""],["cudnnCreateConvolutionDescriptor",""],["cudnnCreateDropoutDescriptor",""],["cudnnCreateFilterDescriptor",""],["cudnnCreateFusedOpsConstParamPack",""],["cudnnCreateFusedOpsPlan",""],["cudnnCreateFusedOpsVariantParamPack",""],["cudnnCreateLRNDescriptor",""],["cudnnCreateOpTensorDescriptor",""],["cudnnCreatePersistentRNNPlan",""],["cudnnCreatePoolingDescriptor",""],["cudnnCreateRNNDataDescriptor",""],["cudnnCreateRNNDescriptor",""],["cudnnCreateReduceTensorDescriptor",""],["cudnnCreateSeqDataDescriptor",""],["cudnnCreateSpatialTransformerDescriptor",""],["cudnnCreateTensorDescriptor",""],["cudnnCreateTensorTransformDescriptor","Create an empty tensor transform descriptor"],["cudnnDeriveBNTensorDescriptor",""],["cudnnDeriveNormTensorDescriptor",""],["cudnnDestroy",""],["cudnnDestroyActivationDescriptor",""],["cudnnDestroyAlgorithmDescriptor",""],["cudnnDestroyAlgorithmPerformance",""],["cudnnDestroyAttnDescriptor",""],["cudnnDestroyCTCLossDescriptor",""],["cudnnDestroyConvolutionDescriptor",""],["cudnnDestroyDropoutDescriptor",""],["cudnnDestroyFilterDescriptor",""],["cudnnDestroyFusedOpsConstParamPack",""],["cudnnDestroyFusedOpsPlan",""],["cudnnDestroyFusedOpsVariantParamPack",""],["cudnnDestroyLRNDescriptor",""],["cudnnDestroyOpTensorDescriptor",""],["cudnnDestroyPersistentRNNPlan",""],["cudnnDestroyPoolingDescriptor",""],["cudnnDestroyRNNDataDescriptor",""],["cudnnDestroyRNNDescriptor",""],["cudnnDestroyReduceTensorDescriptor",""],["cudnnDestroySeqDataDescriptor",""],["cudnnDestroySpatialTransformerDescriptor",""],["cudnnDestroyTensorDescriptor",""],["cudnnDestroyTensorTransformDescriptor","Destroys a previously created tensor transform descriptor."],["cudnnDivisiveNormalizationBackward",""],["cudnnDivisiveNormalizationForward",""],["cudnnDropoutBackward",""],["cudnnDropoutForward",""],["cudnnDropoutGetReserveSpaceSize",""],["cudnnDropoutGetStatesSize",""],["cudnnFindConvolutionBackwardDataAlgorithm",""],["cudnnFindConvolutionBackwardDataAlgorithmEx",""],["cudnnFindConvolutionBackwardFilterAlgorithm",""],["cudnnFindConvolutionBackwardFilterAlgorithmEx",""],["cudnnFindConvolutionForwardAlgorithm",""],["cudnnFindConvolutionForwardAlgorithmEx",""],["cudnnFindRNNBackwardDataAlgorithmEx",""],["cudnnFindRNNBackwardWeightsAlgorithmEx",""],["cudnnFindRNNForwardInferenceAlgorithmEx",""],["cudnnFindRNNForwardTrainingAlgorithmEx",""],["cudnnFusedOpsExecute",""],["cudnnGetActivationDescriptor",""],["cudnnGetActivationDescriptorSwishBeta",""],["cudnnGetAlgorithmDescriptor",""],["cudnnGetAlgorithmPerformance",""],["cudnnGetAlgorithmSpaceSize",""],["cudnnGetAttnDescriptor",""],["cudnnGetBatchNormalizationBackwardExWorkspaceSize",""],["cudnnGetBatchNormalizationForwardTrainingExWorkspaceSize",""],["cudnnGetBatchNormalizationTrainingExReserveSpaceSize",""],["cudnnGetCTCLossDescriptor",""],["cudnnGetCTCLossDescriptorEx",""],["cudnnGetCTCLossDescriptor_v8",""],["cudnnGetCTCLossWorkspaceSize",""],["cudnnGetCTCLossWorkspaceSize_v8",""],["cudnnGetCallback",""],["cudnnGetConvolution2dDescriptor",""],["cudnnGetConvolution2dForwardOutputDim",""],["cudnnGetConvolutionBackwardDataAlgorithmMaxCount",""],["cudnnGetConvolutionBackwardDataAlgorithm_v7",""],["cudnnGetConvolutionBackwardDataWorkspaceSize",""],["cudnnGetConvolutionBackwardFilterAlgorithmMaxCount",""],["cudnnGetConvolutionBackwardFilterAlgorithm_v7",""],["cudnnGetConvolutionBackwardFilterWorkspaceSize",""],["cudnnGetConvolutionForwardAlgorithmMaxCount",""],["cudnnGetConvolutionForwardAlgorithm_v7",""],["cudnnGetConvolutionForwardWorkspaceSize",""],["cudnnGetConvolutionGroupCount",""],["cudnnGetConvolutionMathType",""],["cudnnGetConvolutionNdDescriptor",""],["cudnnGetConvolutionNdForwardOutputDim",""],["cudnnGetConvolutionReorderType",""],["cudnnGetCudartVersion",""],["cudnnGetDropoutDescriptor",""],["cudnnGetErrorString",""],["cudnnGetFilter4dDescriptor",""],["cudnnGetFilterNdDescriptor",""],["cudnnGetFilterSizeInBytes",""],["cudnnGetFoldedConvBackwardDataDescriptors",""],["cudnnGetFusedOpsConstParamPackAttribute",""],["cudnnGetFusedOpsVariantParamPackAttribute",""],["cudnnGetLRNDescriptor",""],["cudnnGetMultiHeadAttnBuffers",""],["cudnnGetMultiHeadAttnWeights",""],["cudnnGetNormalizationBackwardWorkspaceSize",""],["cudnnGetNormalizationForwardTrainingWorkspaceSize",""],["cudnnGetNormalizationTrainingReserveSpaceSize",""],["cudnnGetOpTensorDescriptor",""],["cudnnGetPooling2dDescriptor",""],["cudnnGetPooling2dForwardOutputDim",""],["cudnnGetPoolingNdDescriptor",""],["cudnnGetPoolingNdForwardOutputDim",""],["cudnnGetProperty",""],["cudnnGetRNNBackwardDataAlgorithmMaxCount",""],["cudnnGetRNNBackwardWeightsAlgorithmMaxCount",""],["cudnnGetRNNBiasMode",""],["cudnnGetRNNDataDescriptor",""],["cudnnGetRNNDescriptor_v6",""],["cudnnGetRNNDescriptor_v8",""],["cudnnGetRNNForwardInferenceAlgorithmMaxCount",""],["cudnnGetRNNForwardTrainingAlgorithmMaxCount",""],["cudnnGetRNNLinLayerBiasParams",""],["cudnnGetRNNLinLayerMatrixParams",""],["cudnnGetRNNMatrixMathType",""],["cudnnGetRNNPaddingMode",""],["cudnnGetRNNParamsSize",""],["cudnnGetRNNProjectionLayers",""],["cudnnGetRNNTempSpaceSizes",""],["cudnnGetRNNTrainingReserveSize",""],["cudnnGetRNNWeightParams",""],["cudnnGetRNNWeightSpaceSize",""],["cudnnGetRNNWorkspaceSize",""],["cudnnGetReduceTensorDescriptor",""],["cudnnGetReductionIndicesSize",""],["cudnnGetReductionWorkspaceSize",""],["cudnnGetSeqDataDescriptor",""],["cudnnGetStream",""],["cudnnGetTensor4dDescriptor",""],["cudnnGetTensorNdDescriptor",""],["cudnnGetTensorSizeInBytes",""],["cudnnGetTensorTransformDescriptor","Retrieves the values stored in a previously initialized tensor transform descriptor."],["cudnnGetVersion",""],["cudnnIm2Col",""],["cudnnInitTransformDest","Create a destination descriptor for cudnnTransformTensor"],["cudnnLRNCrossChannelBackward",""],["cudnnLRNCrossChannelForward",""],["cudnnMakeFusedOpsPlan",""],["cudnnMultiHeadAttnBackwardData",""],["cudnnMultiHeadAttnBackwardWeights",""],["cudnnMultiHeadAttnForward",""],["cudnnNormalizationBackward",""],["cudnnNormalizationForwardInference",""],["cudnnNormalizationForwardTraining",""],["cudnnOpTensor",""],["cudnnOpsInferVersionCheck",""],["cudnnOpsTrainVersionCheck",""],["cudnnPoolingBackward",""],["cudnnPoolingForward",""],["cudnnQueryRuntimeError",""],["cudnnRNNBackwardData",""],["cudnnRNNBackwardDataEx",""],["cudnnRNNBackwardData_v8",""],["cudnnRNNBackwardWeights",""],["cudnnRNNBackwardWeightsEx",""],["cudnnRNNBackwardWeights_v8",""],["cudnnRNNForward",""],["cudnnRNNForwardInference",""],["cudnnRNNForwardInferenceEx",""],["cudnnRNNForwardTraining",""],["cudnnRNNForwardTrainingEx",""],["cudnnRNNGetClip",""],["cudnnRNNGetClip_v8",""],["cudnnRNNSetClip",""],["cudnnRNNSetClip_v8",""],["cudnnReduceTensor",""],["cudnnReorderFilterAndBias",""],["cudnnRestoreAlgorithm",""],["cudnnRestoreDropoutDescriptor",""],["cudnnSaveAlgorithm",""],["cudnnScaleTensor",""],["cudnnSetActivationDescriptor",""],["cudnnSetActivationDescriptorSwishBeta",""],["cudnnSetAlgorithmDescriptor",""],["cudnnSetAlgorithmPerformance",""],["cudnnSetAttnDescriptor",""],["cudnnSetCTCLossDescriptor",""],["cudnnSetCTCLossDescriptorEx",""],["cudnnSetCTCLossDescriptor_v8",""],["cudnnSetCallback",""],["cudnnSetConvolution2dDescriptor",""],["cudnnSetConvolutionGroupCount",""],["cudnnSetConvolutionMathType",""],["cudnnSetConvolutionNdDescriptor",""],["cudnnSetConvolutionReorderType",""],["cudnnSetDropoutDescriptor",""],["cudnnSetFilter4dDescriptor",""],["cudnnSetFilterNdDescriptor",""],["cudnnSetFusedOpsConstParamPackAttribute",""],["cudnnSetFusedOpsVariantParamPackAttribute",""],["cudnnSetLRNDescriptor",""],["cudnnSetOpTensorDescriptor",""],["cudnnSetPersistentRNNPlan",""],["cudnnSetPooling2dDescriptor",""],["cudnnSetPoolingNdDescriptor",""],["cudnnSetRNNAlgorithmDescriptor",""],["cudnnSetRNNBiasMode",""],["cudnnSetRNNDataDescriptor",""],["cudnnSetRNNDescriptor_v6",""],["cudnnSetRNNDescriptor_v8",""],["cudnnSetRNNMatrixMathType",""],["cudnnSetRNNPaddingMode",""],["cudnnSetRNNProjectionLayers",""],["cudnnSetReduceTensorDescriptor",""],["cudnnSetSeqDataDescriptor",""],["cudnnSetSpatialTransformerNdDescriptor",""],["cudnnSetStream",""],["cudnnSetTensor",""],["cudnnSetTensor4dDescriptor",""],["cudnnSetTensor4dDescriptorEx",""],["cudnnSetTensorNdDescriptor",""],["cudnnSetTensorNdDescriptorEx",""],["cudnnSetTensorTransformDescriptor","Initialize a previously created tensor transform descriptor."],["cudnnSoftmaxBackward",""],["cudnnSoftmaxForward",""],["cudnnSpatialTfGridGeneratorBackward",""],["cudnnSpatialTfGridGeneratorForward",""],["cudnnSpatialTfSamplerBackward",""],["cudnnSpatialTfSamplerForward",""],["cudnnTransformFilter",""],["cudnnTransformTensor",""],["cudnnTransformTensorEx",""],["tensor_vec_id_c","Return C Handle for a Vector of Tensor Descriptors"]],"mod":[["cuda","Defines Cuda Device Memory."],["utils","Describes utility functionality for CUDA cuDNN."]],"struct":[["API","Defines the Cuda cuDNN API."],["ActivationDescriptor","Describes a ActivationDescriptor."],["CUevent_st",""],["CUexternalMemory_st",""],["CUexternalSemaphore_st",""],["CUfunc_st",""],["CUgraphExec_st",""],["CUgraphNode_st",""],["CUgraph_st",""],["CUmemPoolHandle_st",""],["CUstream_st",""],["CUuserObject_st",""],["CUuuid_st",""],["ConvolutionDescriptor","Describes a Convolution Descriptor."],["Cudnn","Provides a the high-level interface to CUDA’s cuDNN."],["DropoutDescriptor","Describes a DropoutDescriptor."],["FilterDescriptor","Describes a Filter Descriptor."],["NormalizationDescriptor","Describes a LRN Descriptor."],["PoolingDescriptor","Describes a Pooling Descriptor."],["RnnDescriptor","Describes a Recurrent Descriptor."],["TensorDescriptor","Describes a TensorDescriptor."],["cudaAccessPolicyWindow","Specifies an access policy for a window, a contiguous extent of memory beginning at base_ptr and ending at base_ptr + num_bytes. Partition into many segments and assign segments such that. sum of “hit segments” / window == approx. ratio. sum of “miss segments” / window == approx 1-ratio. Segments and ratio specifications are fitted to the capabilities of the architecture. Accesses in a hit segment apply the hitProp access policy. Accesses in a miss segment apply the missProp access policy."],["cudaArray",""],["cudaArraySparseProperties","Sparse CUDA array and CUDA mipmapped array properties"],["cudaArraySparseProperties__bindgen_ty_1",""],["cudaChannelFormatDesc","CUDA Channel format descriptor"],["cudaDeviceProp","CUDA device properties"],["cudaExtent","CUDA extent"],["cudaExternalMemoryBufferDesc","External memory buffer descriptor"],["cudaExternalMemoryHandleDesc","External memory handle descriptor"],["cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1","Win32 handle referencing the semaphore object. Valid when type is one of the following:"],["cudaExternalMemoryMipmappedArrayDesc","External memory mipmap descriptor"],["cudaExternalSemaphoreHandleDesc","External semaphore handle descriptor"],["cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1","Win32 handle referencing the semaphore object. Valid when type is one of the following:"],["cudaExternalSemaphoreSignalNodeParams","External semaphore signal node parameters"],["cudaExternalSemaphoreSignalParams","External semaphore signal parameters, compatible with driver type"],["cudaExternalSemaphoreSignalParams__bindgen_ty_1",""],["cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1","Parameters for fence objects"],["cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3","Parameters for keyed mutex objects"],["cudaExternalSemaphoreWaitNodeParams","External semaphore wait node parameters"],["cudaExternalSemaphoreWaitParams","External semaphore wait parameters, compatible with driver type"],["cudaExternalSemaphoreWaitParams__bindgen_ty_1",""],["cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1","Parameters for fence objects"],["cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3","Parameters for keyed mutex objects"],["cudaFuncAttributes","CUDA function attributes"],["cudaGraphicsResource","CUDA graphics interop resource"],["cudaHostNodeParams","CUDA host node parameters"],["cudaIpcEventHandle_st","CUDA IPC event handle"],["cudaIpcMemHandle_st","CUDA IPC memory handle"],["cudaKernelNodeParams","CUDA GPU kernel node parameters"],["cudaLaunchParams","CUDA launch parameters"],["cudaMemAccessDesc","Memory access descriptor"],["cudaMemAllocNodeParams","Memory allocation node parameters"],["cudaMemLocation","Specifies a memory location."],["cudaMemPoolProps","Specifies the properties of allocations made from the pool."],["cudaMemPoolPtrExportData","Opaque data for exporting a pool allocation"],["cudaMemcpy3DParms","CUDA 3D memory copying parameters"],["cudaMemcpy3DPeerParms","CUDA 3D cross-device memory copying parameters"],["cudaMemsetParams","CUDA Memset node parameters"],["cudaMipmappedArray",""],["cudaPitchedPtr","CUDA Pitched memory pointer"],["cudaPointerAttributes","CUDA pointer attributes"],["cudaPos","CUDA 3D position"],["cudaResourceDesc","CUDA resource descriptor"],["cudaResourceDesc__bindgen_ty_1__bindgen_ty_1",""],["cudaResourceDesc__bindgen_ty_1__bindgen_ty_2",""],["cudaResourceDesc__bindgen_ty_1__bindgen_ty_3",""],["cudaResourceDesc__bindgen_ty_1__bindgen_ty_4",""],["cudaResourceViewDesc","CUDA resource view descriptor"],["cudaTextureDesc","CUDA texture descriptor"],["cudnnActivationStruct",""],["cudnnAlgorithmPerformanceStruct",""],["cudnnAlgorithmStruct",""],["cudnnAlgorithmUnionStruct",""],["cudnnAttnStruct",""],["cudnnCTCLossStruct",""],["cudnnContext",""],["cudnnConvolutionBwdDataAlgoPerfStruct",""],["cudnnConvolutionBwdFilterAlgoPerfStruct",""],["cudnnConvolutionFwdAlgoPerfStruct",""],["cudnnConvolutionStruct",""],["cudnnDebugStruct",""],["cudnnDropoutStruct",""],["cudnnFilterStruct",""],["cudnnFusedOpsConstParamStruct",""],["cudnnFusedOpsPlanStruct",""],["cudnnFusedOpsVariantParamStruct",""],["cudnnLRNStruct",""],["cudnnOpTensorStruct",""],["cudnnPersistentRNNPlan",""],["cudnnPoolingStruct",""],["cudnnRNNDataStruct",""],["cudnnRNNStruct",""],["cudnnReduceTensorStruct",""],["cudnnRuntimeTag_t",""],["cudnnSeqDataStruct",""],["cudnnSpatialTransformerStruct",""],["cudnnTensorStruct",""],["cudnnTensorTransformStruct",""],["dim3",""],["surfaceReference","CUDA Surface reference"],["textureReference","CUDA texture reference"]],"type":[["CUuuid",""],["__int32_t",""],["__int64_t",""],["__uint32_t",""],["cudaArray_const_t","CUDA array (as source copy argument)"],["cudaArray_t","CUDA array"],["cudaEvent_t","CUDA event types"],["cudaExternalMemory_t","CUDA external memory"],["cudaExternalSemaphore_t","CUDA external semaphore"],["cudaFunction_t","CUDA function"],["cudaGraphExec_t","CUDA executable (launchable) graph"],["cudaGraphNode_t","CUDA graph node."],["cudaGraph_t","CUDA graph"],["cudaGraphicsResource_t","CUDA graphics resource types"],["cudaHostFn_t","CUDA host function \\param userData Argument value passed to the function"],["cudaIpcEventHandle_t","CUDA IPC event handle"],["cudaIpcMemHandle_t","CUDA IPC memory handle"],["cudaMemPool_t","CUDA memory pool"],["cudaMipmappedArray_const_t","CUDA mipmapped array (as source argument)"],["cudaMipmappedArray_t","CUDA mipmapped array"],["cudaStreamCallback_t","Type of stream callback functions. \\param stream The stream as passed to ::cudaStreamAddCallback, may be NULL. \\param status ::cudaSuccess or any persistent error on the stream. \\param userData User parameter provided at registration."],["cudaStream_t","CUDA stream"],["cudaSurfaceObject_t","An opaque value that represents a CUDA Surface object"],["cudaTextureObject_t","An opaque value that represents a CUDA texture object"],["cudaUUID_t",""],["cudaUserObject_t","CUDA user object for graphs"],["cudnnActivationDescriptor_t",""],["cudnnAlgorithmDescriptor_t",""],["cudnnAlgorithmPerformance_t",""],["cudnnAlgorithm_t",""],["cudnnAttnDescriptor_t",""],["cudnnAttnQueryMap_t",""],["cudnnBackendDescriptor_t",""],["cudnnCTCLossDescriptor_t",""],["cudnnCallback_t",""],["cudnnConvolutionBwdDataAlgoPerf_t",""],["cudnnConvolutionBwdFilterAlgoPerf_t",""],["cudnnConvolutionDescriptor_t",""],["cudnnConvolutionFwdAlgoPerf_t",""],["cudnnDebug_t",""],["cudnnDropoutDescriptor_t",""],["cudnnFilterDescriptor_t",""],["cudnnFusedOpsConstParamPack_t",""],["cudnnFusedOpsPlan_t",""],["cudnnFusedOpsVariantParamPack_t",""],["cudnnHandle_t",""],["cudnnLRNDescriptor_t",""],["cudnnOpTensorDescriptor_t",""],["cudnnPersistentRNNPlan_t",""],["cudnnPoolingDescriptor_t",""],["cudnnRNNDataDescriptor_t",""],["cudnnRNNDescriptor_t",""],["cudnnRNNPaddingMode_t",""],["cudnnReduceTensorDescriptor_t",""],["cudnnSeqDataDescriptor_t",""],["cudnnSpatialTransformerDescriptor_t",""],["cudnnTensorDescriptor_t",""],["cudnnTensorTransformDescriptor_t",""],["libraryPropertyType",""],["libraryPropertyType_t",""]],"union":[["cudaExternalMemoryHandleDesc__bindgen_ty_1",""],["cudaExternalSemaphoreHandleDesc__bindgen_ty_1",""],["cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2",""],["cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2",""],["cudaKernelNodeAttrValue","Graph kernel node attributes union, used with ::cudaGraphKernelNodeSetAttribute/::cudaGraphKernelNodeGetAttribute"],["cudaResourceDesc__bindgen_ty_1",""],["cudaStreamAttrValue","Stream attributes union used with ::cudaStreamSetAttribute/::cudaStreamGetAttribute"],["cudnnAlgorithmUnionStruct_Algorithm",""]]};